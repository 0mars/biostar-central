{

uid: hello

name: How To Create Analysis Recipes

image: tutorial-project.png

summary: '''
This project contains analyses that demonstrate the process
of creating a **recipe**. Follow the **examples** and **instructions** along the way.
'''

text: '''

    This project hosts a number of analyses (called recipes) and results
    produced by applying the recipe on data.

    Each analysis may have one or more results associated with it.

    # The Basics

    Each analysis recipe is composed of two ingredients:

    1. The template
    2. The data

    The **template** contains the commands that need to be executed
    and has placeholders for the data that it will need to operate on.
    The **data** contains the values that get substituted into the **template**.

    We'll walk through each example now.

    # Hello World 1

    The simplest recipe is one that contains noting file for both **template** and **data**

    Because it has nothing in it, default values get substituted. This is why we ended up with
    **No name** and **No summary** above. Now investigate the **No name** analysis.

    Follow the **Show Recipe** action. It shows you how both the **template** and the **data** are empty.
    Follow the **Show results** action. Note how even an empty recipe produces
    outputs. The files named:

    - `run.sh` contains the command that were run.
    - `run.sh.json` contains the command that were run.
    - `run.sh.stdout.log` contains the output messages that the recipe produced
    - `run.sh.stderr.log` contains the error messages that the recipe produced

    This same information is visible for the job on the previous page.

    # Hello World 2

    Let's make the recipe print **Hello world!**

    Visit this recipe and look at the recipe source. Note the changes added to the **template** and the
    **data**.

    The special entry called **settings** allows you to control
    the way the recipe is displayed on the site. This is where the name,
    the summary and the description for the recipe comes from.

    # Hello world 3

    This recipe demonstrates how parameters in the **data** get rendered as input widgets.

    The tools takes two parameters, organism and cutoff and passes these into the template.

    # Hello world 4

    This recipe demonstrates how uploaded files are handled and rendered as input widgets
    on the website.

    The tools takes an uploaded data then passes it into the template.

'''

analyses: [

    {
        json: biostar/tools/hello/hello4.hjson
        template: biostar/tools/hello/hello4.sh
    }

    {
        json: biostar/tools/hello/hello3.hjson
        template: biostar/tools/hello/hello3.sh
    }

    {
        json: biostar/tools/hello/hello2.hjson
        template: biostar/tools/hello/hello2.sh
    }

    {
        json: biostar/tools/hello/hello1.hjson
        template: biostar/tools/hello/hello1.sh
    }


]

}
