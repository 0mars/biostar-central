"""
Model definitions.

Note: some models are denormalized by design, this greatly simplifies (and speeds up) 
the queries necessary to fetch a certain entry.

"""
from django.db import models
from django.contrib.auth.models import User

class UserProfile( models.Model ):
    """
    Stores user options

    >>> user = User.objects.create(first_name='Jane', last_name='Doe', username='jane', email='jane')
    >>> prof = user.get_profile()
    >>> prof.json = dict( message='Hello world' )
    >>> prof.save()
    >>>
    >>> # now retrieve the profile
    >>> json = User.objects.get(username='jane').get_profile().json
    >>> json['message']
    u'Hello world'
    """
    user  = models.ForeignKey(User, unique=True)
    score = models.IntegerField(default=0, blank=True)
    json  = models.TextField(default="", null=True)
    last_visited = models.DateTimeField(auto_now=True)
    creation_date = models.DateTimeField(auto_now_add=True)

class Post(models.Model):
    "A posting is the basic content generated by a user"
    author = models.ForeignKey(User)
    
    bbcode = models.TextField() # all user input is in bbcode
    html  = models.TextField() # this is generated from the bbcode when saving the model
    votes = models.IntegerField(default=0, blank=True)
    views = models.IntegerField(default=0, blank=True)
    score = models.IntegerField(default=0, blank=True)
    creation_date = models.DateTimeField(auto_now_add=True)
    lastedit_date = models.DateTimeField(auto_now=True)
    lastedit_user = models.ForeignKey(User, related_name='editor')

class Question(models.Model):
    title   = models.TextField()
    answer_count = models.IntegerField(default=0, blank=True)
    post = models.ForeignKey(Post)

class Answer(models.Model):
    question = models.ForeignKey(Question, related_name='answers')
    post = models.ForeignKey(Post)

class Comment(models.Model):
    parent = models.ForeignKey(Post, related_name='comments')
    post = models.ForeignKey(Post, related_name='content')

class Vote(models.Model):
    author = models.ForeignKey(User)
    post = models.ForeignKey(Post)
    vote = models.IntegerField()

